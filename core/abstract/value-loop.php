<?php
/**
 *
 * Initial version created 31-05-2018 / 07:08 AM
 *
 * @author Varun Sridharan <varunsridharan23@gmail.com>
 * @version 1.0
 * @since 1.0
 * @package
 * @link
 * @copyright 2018 Varun Sridharan
 * @license GPLV3 Or Greater (https://www.gnu.org/licenses/gpl-3.0.txt)
 */

namespace WPOnion\Bridge;

if ( ! defined( 'ABSPATH' ) ) {
	die;
}
if ( ! class_exists( '\WPOnion\Bridge\value_loop' ) ) {
	/**
	 * Class value_loop
	 *
	 * @package WPOnion\Bridge
	 * @author Varun Sridharan <varunsridharan23@gmail.com>
	 * @since 1.0
	 */
	abstract class value_loop extends \WPOnion\Bridge\Value {
		/***
		 * in_loop
		 *
		 * @var bool
		 */
		protected $in_loop = false;

		/**
		 * current_loop
		 *
		 * @var int
		 */
		protected $current_loop = 0;


		/**
		 * @return bool
		 */
		public function has() {
			if ( $this->current_loop + 1 <= count( $this->value ) ) {
				$this->in_loop = true;
				return true;
			} elseif ( count( $this->value ) === $this->current_loop + 1 && 0 > count( $this->value ) ) {
				$this->in_loop = true;
				return true;
			} else {
				$this->in_loop = false;
				return false;
			}
		}

		/**
		 * @param null $path
		 * @param null $default
		 *
		 * @return false|mixed|$this
		 */
		public function get( $path = null, $default = null ) {
			if ( false !== $this->in_loop ) {
				if ( isset( $this->value[ $this->current_loop ] ) ) {
					$data = $this->value[ $this->current_loop ];
					$this->current_loop++;
					return $data;
				} elseif ( 0 === $this->current_loop ) {
					$this->current_loop++;
					return current( $this->value );
				} else {
					$this->current_loop++;
					return next( $this->value );
				}
			}
			return parent::get( $path, $default ); // TODO: Change the autogenerated stub
		}
	}
}
